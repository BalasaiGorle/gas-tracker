{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\\\u753B\\u50CF\\\\Screenshots\\\\balasai\\\\gas-tracker\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react'; // Removed useState as it's not directly used in App component's top level\nimport { create } from 'zustand';\nimport { ethers } from 'ethers';\nimport { createChart, ColorType } from 'lightweight-charts';\n\n// Zustand Store Definition\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useGasStore = create(set => ({\n  ethGas: {\n    fast: null,\n    avg: null,\n    slow: null,\n    baseFee: null,\n    priorityFee: null,\n    timestamp: null\n  },\n  polygonGas: {\n    fast: null,\n    avg: null,\n    slow: null,\n    baseFee: null,\n    priorityFee: null,\n    timestamp: null\n  },\n  arbitrumGas: {\n    fast: null,\n    avg: null,\n    slow: null,\n    baseFee: null,\n    priorityFee: null,\n    timestamp: null,\n    l1GasEstimate: null\n  },\n  ethUsdPrice: null,\n  simulationMode: false,\n  transactionValue: 0.01,\n  simulatedCosts: {\n    eth: null,\n    polygon: null,\n    arbitrum: null\n  },\n  chartData: [],\n  currentChartChain: 'ethereum',\n  setEthGas: gas => set({\n    ethGas: gas\n  }),\n  setPolygonGas: gas => set({\n    polygonGas: gas\n  }),\n  setArbitrumGas: gas => set({\n    arbitrumGas: gas\n  }),\n  setEthUsdPrice: price => set({\n    ethUsdPrice: price\n  }),\n  toggleSimulationMode: () => set(state => ({\n    simulationMode: !state.simulationMode\n  })),\n  setTransactionValue: value => set({\n    transactionValue: value\n  }),\n  setSimulatedCosts: costs => set({\n    simulatedCosts: costs\n  }),\n  addChartData: data => set(state => ({\n    chartData: [...state.chartData, data]\n  })),\n  setCurrentChartChain: chain => set({\n    currentChartChain: chain\n  })\n}));\n\n// Constants for RPC URLs and Uniswap V3 Pool\nconst RPC_URLS = {\n  ethereum: 'wss://mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\n  polygon: 'wss://polygon-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\n  arbitrum: 'wss://arbitrum-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb'\n};\n\n// Public API for ETH/USD price (CoinGecko)\nconst COINGECKO_ETH_USD_API = 'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd';\n\n// Custom Hook for fetching gas prices\nconst useGasFetcher = (chainName, setGas, addChartData, currentChartChain) => {\n  _s();\n  const providerRef = useRef(null);\n  const intervalRef = useRef(null);\n  const fetchGas = useCallback(async () => {\n    if (!providerRef.current) return;\n    try {\n      const block = await providerRef.current.getBlock('latest');\n      const baseFeePerGas = block.baseFeePerGas;\n      let maxPriorityFeePerGas;\n      try {\n        const feeData = await providerRef.current.getFeeData();\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n      } catch (error) {\n        console.warn(`Could not get fee data for ${chainName}, estimating priority fee.`, error);\n        maxPriorityFeePerGas = ethers.utils.parseUnits(\"1.5\", \"gwei\");\n      }\n      const fastGas = baseFeePerGas.add(maxPriorityFeePerGas.mul(2));\n      const avgGas = baseFeePerGas.add(maxPriorityFeePerGas);\n      const slowGas = baseFeePerGas.add(maxPriorityFeePerGas.div(2));\n      let l1GasEstimate = null;\n      if (chainName === 'arbitrum') {\n        l1GasEstimate = ethers.utils.parseUnits(\"0.00001\", \"ether\");\n      }\n      const now = Date.now();\n      const gasData = {\n        fast: parseFloat(ethers.utils.formatUnits(fastGas, \"gwei\")).toFixed(2),\n        avg: parseFloat(ethers.utils.formatUnits(avgGas, \"gwei\")).toFixed(2),\n        slow: parseFloat(ethers.utils.formatUnits(slowGas, \"gwei\")).toFixed(2),\n        baseFee: parseFloat(ethers.utils.formatUnits(baseFeePerGas, \"gwei\")).toFixed(2),\n        priorityFee: parseFloat(ethers.utils.formatUnits(maxPriorityFeePerGas, \"gwei\")).toFixed(2),\n        timestamp: now,\n        l1GasEstimate: l1GasEstimate ? parseFloat(ethers.utils.formatEther(l1GasEstimate)).toFixed(5) : null\n      };\n      setGas(gasData);\n      if (currentChartChain === chainName) {\n        addChartData({\n          time: now / 1000,\n          value: parseFloat(gasData.avg)\n        });\n      }\n    } catch (error) {\n      console.error(`Error fetching gas for ${chainName}:`, error);\n    }\n  }, [chainName, setGas, addChartData, currentChartChain]);\n  useEffect(() => {\n    if (!RPC_URLS[chainName] || RPC_URLS[chainName].includes('YOUR_INFURA_PROJECT_ID')) {\n      console.error(`Please replace 'YOUR_INFURA_PROJECT_ID' in RPC_URLS for ${chainName}.`);\n      return;\n    }\n    try {\n      providerRef.current = new ethers.providers.WebSocketProvider(RPC_URLS[chainName]);\n      console.log(`Connected to ${chainName} WebSocket.`);\n      fetchGas();\n      intervalRef.current = setInterval(fetchGas, 6000);\n      return () => {\n        if (intervalRef.current) clearInterval(intervalRef.current);\n        if (providerRef.current) {\n          providerRef.current.destroy();\n          console.log(`Disconnected from ${chainName} WebSocket.`);\n        }\n      };\n    } catch (error) {\n      console.error(`Failed to connect to ${chainName} WebSocket:`, error);\n    }\n  }, [chainName, fetchGas]);\n};\n\n// Custom Hook for fetching ETH/USD price from a public API\n_s(useGasFetcher, \"rAdJuyTYPGo6vv2afotKj+ydvgo=\");\nconst useEthUsdPriceFetcher = setEthUsdPrice => {\n  _s2();\n  const intervalRef = useRef(null);\n  const fetchPrice = useCallback(async () => {\n    try {\n      const response = await fetch(COINGECKO_ETH_USD_API);\n      const data = await response.json();\n      if (data && data.ethereum && data.ethereum.usd) {\n        setEthUsdPrice(data.ethereum.usd);\n      } else {\n        console.warn(\"Could not fetch ETH/USD price from CoinGecko.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching ETH/USD price from public API:\", error);\n    }\n  }, [setEthUsdPrice]);\n  useEffect(() => {\n    console.log(\"Initialized ETH/USD price fetcher (using public API).\");\n    fetchPrice();\n    intervalRef.current = setInterval(fetchPrice, 15000);\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [fetchPrice]);\n};\n\n// Component for displaying gas prices\n_s2(useEthUsdPriceFetcher, \"bDXURmTT2UOirS6uZu7Tgk8VD10=\");\nconst GasPriceCard = ({\n  chainName,\n  gasData,\n  ethUsdPrice,\n  l1GasEstimate\n}) => {\n  _s3();\n  const {\n    simulationMode,\n    transactionValue,\n    simulatedCosts\n  } = useGasStore();\n\n  // The getGasCostUsd function was removed because it was not being directly used in the JSX.\n  // The simulatedCosts are now directly accessed from the Zustand store.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white flex-1 min-w-[280px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4 capitalize\",\n      children: [chainName, \" Gas\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), gasData.timestamp ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-400 mb-2\",\n        children: [\"Last Updated: \", new Date(gasData.timestamp).toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 gap-2 text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Base Fee:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.baseFee, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Priority Fee:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.priorityFee, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Slow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.slow, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Average:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.avg, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fast:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.fast, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 37\n        }, this), chainName === 'arbitrum' && l1GasEstimate && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"L1 Gas Est.:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-mono\",\n            children: [l1GasEstimate, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 21\n      }, this), simulationMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 pt-4 border-t border-gray-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-md font-medium mb-2\",\n          children: \"Simulated Cost (Avg Gas)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg font-bold text-green-400\",\n          children: [\"$\", simulatedCosts[chainName] !== null ? simulatedCosts[chainName].toFixed(4) : 'Calculating...']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-400 mt-1\",\n          children: [\"(Transaction Value: \", transactionValue, \" \", chainName === 'ethereum' ? 'ETH' : 'MATIC', \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-400\",\n      children: [\"Connecting to \", chainName, \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n// Candlestick Chart Component\n_s3(GasPriceCard, \"R8Y1kubf/F8MvzjohrJrsDbSVNE=\", false, function () {\n  return [useGasStore];\n});\n_c = GasPriceCard;\nconst GasPriceChart = ({\n  data,\n  chainName\n}) => {\n  _s4();\n  const chartContainerRef = useRef();\n  const chartRef = useRef(null);\n  const seriesRef = useRef(null);\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 300,\n      layout: {\n        backgroundColor: ColorType.Solid,\n        background: {\n          type: ColorType.Solid,\n          color: '#1f2937'\n        },\n        textColor: '#d1d5db'\n      },\n      grid: {\n        vertLines: {\n          color: '#374151'\n        },\n        horzLines: {\n          color: '#374151'\n        }\n      },\n      rightPriceScale: {\n        borderColor: '#4b5563'\n      },\n      timeScale: {\n        borderColor: '#4b5563',\n        timeVisible: true,\n        secondsVisible: false\n      },\n      crosshair: {\n        mode: 0\n      },\n      watermark: {\n        visible: true,\n        fontSize: 24,\n        horzAlign: 'center',\n        vertAlign: 'center',\n        color: 'rgba(255, 255, 255, 0.1)',\n        text: `${chainName.toUpperCase()} Gas Price (Gwei)`\n      }\n    });\n    chartRef.current = chart;\n    const newSeries = chart.addLineSeries({\n      color: '#60a5fa',\n      lineWidth: 2,\n      priceFormat: {\n        type: 'price',\n        precision: 2,\n        minMove: 0.01\n      }\n    });\n    seriesRef.current = newSeries;\n    const handleResize = () => {\n      if (chartRef.current && chartContainerRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n        seriesRef.current = null;\n      }\n    };\n  }, [chartContainerRef]);\n  useEffect(() => {\n    if (seriesRef.current) {\n      seriesRef.current.setData(data);\n    }\n    if (chartRef.current) {\n      // Update watermark text when chainName changes\n      chartRef.current.applyOptions({\n        watermark: {\n          text: `${chainName.toUpperCase()} Gas Price (Gwei)`\n        }\n      });\n    }\n  }, [data, chainName]); // Added chainName to dependency array\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg mt-8\",\n    ref: chartContainerRef,\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold text-white mb-4 capitalize\",\n      children: [chainName, \" Gas Price Volatility\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 9\n  }, this);\n};\n\n// Main App Component\n_s4(GasPriceChart, \"ImyjEbaYv8MURJd0mtw+FDP2AOc=\");\n_c2 = GasPriceChart;\nconst App = () => {\n  _s5();\n  const {\n    ethGas,\n    polygonGas,\n    arbitrumGas,\n    ethUsdPrice,\n    simulationMode,\n    transactionValue,\n    simulatedCosts,\n    setEthGas,\n    setPolygonGas,\n    setArbitrumGas,\n    setEthUsdPrice,\n    toggleSimulationMode,\n    setTransactionValue,\n    setSimulatedCosts,\n    chartData,\n    addChartData,\n    currentChartChain,\n    setCurrentChartChain\n  } = useGasStore();\n  useGasFetcher('ethereum', setEthGas, addChartData, currentChartChain);\n  useGasFetcher('polygon', setPolygonGas, addChartData, currentChartChain);\n  useGasFetcher('arbitrum', setArbitrumGas, addChartData, currentChartChain);\n\n  // Use the new public API price fetcher\n  useEthUsdPriceFetcher(setEthUsdPrice);\n  useEffect(() => {\n    if (simulationMode && ethUsdPrice !== null) {\n      const gasLimit = 210000;\n      const calculateCost = (gasData, isArbitrum = false) => {\n        if (!gasData || gasData.avg === null) return null;\n        const avgGwei = parseFloat(gasData.avg);\n        let gasCostEth = avgGwei * gasLimit / 1000000000;\n        if (isArbitrum && gasData.l1GasEstimate) {\n          gasCostEth += parseFloat(gasData.l1GasEstimate);\n        }\n        const txValueInEth = transactionValue;\n        return txValueInEth * ethUsdPrice + gasCostEth * ethUsdPrice;\n      };\n      setSimulatedCosts({\n        eth: calculateCost(ethGas),\n        polygon: calculateCost(polygonGas),\n        arbitrum: calculateCost(arbitrumGas, true)\n      });\n    }\n  }, [simulationMode, transactionValue, ethUsdPrice, ethGas, polygonGas, arbitrumGas, setSimulatedCosts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-gray-100 p-8 font-inter\",\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n                body { font-family: 'Inter', sans-serif; }\n                .chart-container {\n                    width: 100%;\n                    height: 300px; /* Fixed height for the chart */\n                }\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold text-center mb-10 text-blue-400\",\n      children: \"Cross-Chain Gas Price Tracker & Wallet Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-6 rounded-lg shadow-lg mb-8 flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xl font-medium\",\n          children: \"ETH/USD Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-2xl font-bold text-green-400\",\n          children: ethUsdPrice ? `$${ethUsdPrice.toFixed(2)}` : 'Fetching...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"simulationToggle\",\n          className: \"text-lg font-medium\",\n          children: \"Simulation Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"simulationToggle\",\n          className: \"toggle toggle-primary\",\n          checked: simulationMode,\n          onChange: toggleSimulationMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), simulationMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-6 rounded-lg shadow-lg mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"transactionValue\",\n        className: \"block text-lg font-medium mb-2\",\n        children: \"Simulate Transaction Value (ETH/MATIC):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"transactionValue\",\n        className: \"w-full p-3 rounded-md bg-gray-700 border border-gray-600 focus:ring-blue-500 focus:border-blue-500 text-white\",\n        value: transactionValue,\n        onChange: e => setTransactionValue(parseFloat(e.target.value) || 0),\n        step: \"0.01\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-400 mt-2\",\n        children: \"Enter the value of your transaction (e.g., 0.1 ETH for a swap). This will be converted to USD. Gas costs are added on top.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-6 justify-center mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(GasPriceCard, {\n        chainName: \"ethereum\",\n        gasData: ethGas,\n        ethUsdPrice: ethUsdPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GasPriceCard, {\n        chainName: \"polygon\",\n        gasData: polygonGas,\n        ethUsdPrice: ethUsdPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GasPriceCard, {\n        chainName: \"arbitrum\",\n        gasData: arbitrumGas,\n        ethUsdPrice: ethUsdPrice,\n        l1GasEstimate: arbitrumGas.l1GasEstimate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold text-center mb-6 text-blue-400\",\n      children: \"Gas Price Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-4 space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-2 rounded-md font-semibold ${currentChartChain === 'ethereum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`,\n        onClick: () => setCurrentChartChain('ethereum'),\n        children: \"Ethereum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-2 rounded-md font-semibold ${currentChartChain === 'polygon' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`,\n        onClick: () => setCurrentChartChain('polygon'),\n        children: \"Polygon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-2 rounded-md font-semibold ${currentChartChain === 'arbitrum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`,\n        onClick: () => setCurrentChartChain('arbitrum'),\n        children: \"Arbitrum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GasPriceChart, {\n      data: chartData,\n      chainName: currentChartChain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-12 p-6 bg-gray-800 rounded-lg shadow-lg text-gray-300 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold text-white mb-4\",\n        children: \"Notes on Implementation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc list-inside space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**RPC Endpoints:** You MUST replace `YOUR_INFURA_PROJECT_ID` in `RPC_URLS` with your actual Infura project ID for the application to function.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Gas Price Estimation:** The \\\"fast\\\", \\\"average\\\", and \\\"slow\\\" gas price estimations are heuristic. Real-world dApps often use more sophisticated algorithms or third-party gas APIs for better accuracy. `maxPriorityFeePerGas` is estimated or fetched via `getFeeData()`.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Arbitrum L1 Gas:** Calculating Arbitrum's L1 gas fee is complex. This implementation uses a simplified placeholder `l1GasEstimate`. A full solution would involve querying Arbitrum-specific RPC methods (e.g., `eth_estimateGas` with specific calldata for L1 portion) or using an Arbitrum SDK.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Uniswap V3 Price:** The `calculateEthUsdPrice` function directly parses `sqrtPriceX96` from Uniswap V3 `Swap` events. It performs the necessary scaling for token decimals (USDC=6, WETH=18) to derive the ETH/USD price. It fetches logs for the last 5 blocks to ensure a recent price.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Chart Data:** For simplicity, the `lightweight-charts` displays a line chart of the \\\"Average\\\" gas price. Generating true candlestick data (Open, High, Low, Close) from real-time streaming gas prices would require collecting data points over fixed intervals (e.g., 15 minutes) and then aggregating them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Transaction Value Simulation:** The `transactionValue` input directly represents the value of the asset being transacted (e.g., 0.1 ETH). The simulated cost adds this value (converted to USD) to the estimated gas cost. The `gasLimit` for simulation is a fixed example value (210,000); actual gas limits vary greatly by transaction type.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Zustand:** The application uses Zustand for global state management, allowing different components to access and update real-time data and simulation parameters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 328,\n    columnNumber: 9\n  }, this);\n};\n_s5(App, \"oDp+0u79KeooZS7Jb0AHnbsmLnY=\", false, function () {\n  return [useGasStore, useGasFetcher, useGasFetcher, useGasFetcher, useEthUsdPriceFetcher];\n});\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GasPriceCard\");\n$RefreshReg$(_c2, \"GasPriceChart\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","create","ethers","createChart","ColorType","jsxDEV","_jsxDEV","Fragment","_Fragment","useGasStore","set","ethGas","fast","avg","slow","baseFee","priorityFee","timestamp","polygonGas","arbitrumGas","l1GasEstimate","ethUsdPrice","simulationMode","transactionValue","simulatedCosts","eth","polygon","arbitrum","chartData","currentChartChain","setEthGas","gas","setPolygonGas","setArbitrumGas","setEthUsdPrice","price","toggleSimulationMode","state","setTransactionValue","value","setSimulatedCosts","costs","addChartData","data","setCurrentChartChain","chain","RPC_URLS","ethereum","COINGECKO_ETH_USD_API","useGasFetcher","chainName","setGas","_s","providerRef","intervalRef","fetchGas","current","block","getBlock","baseFeePerGas","maxPriorityFeePerGas","feeData","getFeeData","error","console","warn","utils","parseUnits","fastGas","add","mul","avgGas","slowGas","div","now","Date","gasData","parseFloat","formatUnits","toFixed","formatEther","time","includes","providers","WebSocketProvider","log","setInterval","clearInterval","destroy","useEthUsdPriceFetcher","_s2","fetchPrice","response","fetch","json","usd","GasPriceCard","_s3","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","_c","GasPriceChart","_s4","chartContainerRef","chartRef","seriesRef","chart","width","clientWidth","height","layout","backgroundColor","Solid","background","type","color","textColor","grid","vertLines","horzLines","rightPriceScale","borderColor","timeScale","timeVisible","secondsVisible","crosshair","mode","watermark","visible","fontSize","horzAlign","vertAlign","text","toUpperCase","newSeries","addLineSeries","lineWidth","priceFormat","precision","minMove","handleResize","applyOptions","window","addEventListener","removeEventListener","remove","setData","ref","_c2","App","_s5","gasLimit","calculateCost","isArbitrum","avgGwei","gasCostEth","txValueInEth","htmlFor","id","checked","onChange","e","target","step","min","onClick","_c3","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/画像/Screenshots/balasai/gas-tracker/src/App.js"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react'; // Removed useState as it's not directly used in App component's top level\r\nimport { create } from 'zustand';\r\nimport { ethers } from 'ethers';\r\nimport { createChart, ColorType } from 'lightweight-charts';\r\n\r\n// Zustand Store Definition\r\nconst useGasStore = create((set) => ({\r\n    ethGas: { fast: null, avg: null, slow: null, baseFee: null, priorityFee: null, timestamp: null },\r\n    polygonGas: { fast: null, avg: null, slow: null, baseFee: null, priorityFee: null, timestamp: null },\r\n    arbitrumGas: { fast: null, avg: null, slow: null, baseFee: null, priorityFee: null, timestamp: null, l1GasEstimate: null },\r\n    ethUsdPrice: null,\r\n    simulationMode: false,\r\n    transactionValue: 0.01,\r\n    simulatedCosts: { eth: null, polygon: null, arbitrum: null },\r\n    chartData: [],\r\n    currentChartChain: 'ethereum',\r\n\r\n    setEthGas: (gas) => set({ ethGas: gas }),\r\n    setPolygonGas: (gas) => set({ polygonGas: gas }),\r\n    setArbitrumGas: (gas) => set({ arbitrumGas: gas }),\r\n    setEthUsdPrice: (price) => set({ ethUsdPrice: price }),\r\n    toggleSimulationMode: () => set((state) => ({ simulationMode: !state.simulationMode })),\r\n    setTransactionValue: (value) => set({ transactionValue: value }),\r\n    setSimulatedCosts: (costs) => set({ simulatedCosts: costs }),\r\n    addChartData: (data) => set((state) => ({ chartData: [...state.chartData, data] })),\r\n    setCurrentChartChain: (chain) => set({ currentChartChain: chain }),\r\n}));\r\n\r\n// Constants for RPC URLs and Uniswap V3 Pool\r\nconst RPC_URLS = {\r\n    ethereum: 'wss://mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\r\n    polygon: 'wss://polygon-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\r\n    arbitrum: 'wss://arbitrum-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\r\n};\r\n\r\n// Public API for ETH/USD price (CoinGecko)\r\nconst COINGECKO_ETH_USD_API = 'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd';\r\n\r\n\r\n// Custom Hook for fetching gas prices\r\nconst useGasFetcher = (chainName, setGas, addChartData, currentChartChain) => {\r\n    const providerRef = useRef(null);\r\n    const intervalRef = useRef(null);\r\n\r\n    const fetchGas = useCallback(async () => {\r\n        if (!providerRef.current) return;\r\n\r\n        try {\r\n            const block = await providerRef.current.getBlock('latest');\r\n            const baseFeePerGas = block.baseFeePerGas;\r\n\r\n            let maxPriorityFeePerGas;\r\n            try {\r\n                const feeData = await providerRef.current.getFeeData();\r\n                maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n            } catch (error) {\r\n                console.warn(`Could not get fee data for ${chainName}, estimating priority fee.`, error);\r\n                maxPriorityFeePerGas = ethers.utils.parseUnits(\"1.5\", \"gwei\");\r\n            }\r\n\r\n            const fastGas = baseFeePerGas.add(maxPriorityFeePerGas.mul(2));\r\n            const avgGas = baseFeePerGas.add(maxPriorityFeePerGas);\r\n            const slowGas = baseFeePerGas.add(maxPriorityFeePerGas.div(2));\r\n\r\n            let l1GasEstimate = null;\r\n            if (chainName === 'arbitrum') {\r\n                l1GasEstimate = ethers.utils.parseUnits(\"0.00001\", \"ether\");\r\n            }\r\n\r\n            const now = Date.now();\r\n            const gasData = {\r\n                fast: parseFloat(ethers.utils.formatUnits(fastGas, \"gwei\")).toFixed(2),\r\n                avg: parseFloat(ethers.utils.formatUnits(avgGas, \"gwei\")).toFixed(2),\r\n                slow: parseFloat(ethers.utils.formatUnits(slowGas, \"gwei\")).toFixed(2),\r\n                baseFee: parseFloat(ethers.utils.formatUnits(baseFeePerGas, \"gwei\")).toFixed(2),\r\n                priorityFee: parseFloat(ethers.utils.formatUnits(maxPriorityFeePerGas, \"gwei\")).toFixed(2),\r\n                timestamp: now,\r\n                l1GasEstimate: l1GasEstimate ? parseFloat(ethers.utils.formatEther(l1GasEstimate)).toFixed(5) : null,\r\n            };\r\n            setGas(gasData);\r\n\r\n            if (currentChartChain === chainName) {\r\n                addChartData({ time: now / 1000, value: parseFloat(gasData.avg) });\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(`Error fetching gas for ${chainName}:`, error);\r\n        }\r\n    }, [chainName, setGas, addChartData, currentChartChain]);\r\n\r\n    useEffect(() => {\r\n        if (!RPC_URLS[chainName] || RPC_URLS[chainName].includes('YOUR_INFURA_PROJECT_ID')) {\r\n            console.error(`Please replace 'YOUR_INFURA_PROJECT_ID' in RPC_URLS for ${chainName}.`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            providerRef.current = new ethers.providers.WebSocketProvider(RPC_URLS[chainName]);\r\n            console.log(`Connected to ${chainName} WebSocket.`);\r\n\r\n            fetchGas();\r\n            intervalRef.current = setInterval(fetchGas, 6000);\r\n\r\n            return () => {\r\n                if (intervalRef.current) clearInterval(intervalRef.current);\r\n                if (providerRef.current) {\r\n                    providerRef.current.destroy();\r\n                    console.log(`Disconnected from ${chainName} WebSocket.`);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(`Failed to connect to ${chainName} WebSocket:`, error);\r\n        }\r\n    }, [chainName, fetchGas]);\r\n};\r\n\r\n// Custom Hook for fetching ETH/USD price from a public API\r\nconst useEthUsdPriceFetcher = (setEthUsdPrice) => {\r\n    const intervalRef = useRef(null);\r\n\r\n    const fetchPrice = useCallback(async () => {\r\n        try {\r\n            const response = await fetch(COINGECKO_ETH_USD_API);\r\n            const data = await response.json();\r\n            if (data && data.ethereum && data.ethereum.usd) {\r\n                setEthUsdPrice(data.ethereum.usd);\r\n            } else {\r\n                console.warn(\"Could not fetch ETH/USD price from CoinGecko.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching ETH/USD price from public API:\", error);\r\n        }\r\n    }, [setEthUsdPrice]);\r\n\r\n    useEffect(() => {\r\n        console.log(\"Initialized ETH/USD price fetcher (using public API).\");\r\n        fetchPrice();\r\n        intervalRef.current = setInterval(fetchPrice, 15000);\r\n\r\n        return () => {\r\n            if (intervalRef.current) clearInterval(intervalRef.current);\r\n        };\r\n    }, [fetchPrice]);\r\n};\r\n\r\n// Component for displaying gas prices\r\nconst GasPriceCard = ({ chainName, gasData, ethUsdPrice, l1GasEstimate }) => {\r\n    const { simulationMode, transactionValue, simulatedCosts } = useGasStore();\r\n\r\n    // The getGasCostUsd function was removed because it was not being directly used in the JSX.\r\n    // The simulatedCosts are now directly accessed from the Zustand store.\r\n\r\n    return (\r\n        <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white flex-1 min-w-[280px]\">\r\n            <h3 className=\"text-xl font-semibold mb-4 capitalize\">{chainName} Gas</h3>\r\n            {gasData.timestamp ? (\r\n                <>\r\n                    <p className=\"text-sm text-gray-400 mb-2\">Last Updated: {new Date(gasData.timestamp).toLocaleTimeString()}</p>\r\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                        <p>Base Fee:</p><p className=\"font-mono\">{gasData.baseFee} Gwei</p>\r\n                        <p>Priority Fee:</p><p className=\"font-mono\">{gasData.priorityFee} Gwei</p>\r\n                        <p>Slow:</p><p className=\"font-mono\">{gasData.slow} Gwei</p>\r\n                        <p>Average:</p><p className=\"font-mono\">{gasData.avg} Gwei</p>\r\n                        <p>Fast:</p><p className=\"font-mono\">{gasData.fast} Gwei</p>\r\n                        {chainName === 'arbitrum' && l1GasEstimate && (\r\n                            <>\r\n                                <p>L1 Gas Est.:</p><p className=\"font-mono\">{l1GasEstimate} ETH</p>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                    {simulationMode && (\r\n                        <div className=\"mt-4 pt-4 border-t border-gray-700\">\r\n                            <h4 className=\"text-md font-medium mb-2\">Simulated Cost (Avg Gas)</h4>\r\n                            <p className=\"text-lg font-bold text-green-400\">\r\n                                ${simulatedCosts[chainName] !== null ? simulatedCosts[chainName].toFixed(4) : 'Calculating...'}\r\n                            </p>\r\n                            <p className=\"text-xs text-gray-400 mt-1\">\r\n                                (Transaction Value: {transactionValue} {chainName === 'ethereum' ? 'ETH' : 'MATIC'})\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <p className=\"text-gray-400\">Connecting to {chainName}...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Candlestick Chart Component\r\nconst GasPriceChart = ({ data, chainName }) => {\r\n    const chartContainerRef = useRef();\r\n    const chartRef = useRef(null);\r\n    const seriesRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!chartContainerRef.current) return;\r\n\r\n        const chart = createChart(chartContainerRef.current, {\r\n            width: chartContainerRef.current.clientWidth,\r\n            height: 300,\r\n            layout: {\r\n                backgroundColor: ColorType.Solid,\r\n                background: { type: ColorType.Solid, color: '#1f2937' },\r\n                textColor: '#d1d5db',\r\n            },\r\n            grid: {\r\n                vertLines: { color: '#374151' },\r\n                horzLines: { color: '#374151' },\r\n            },\r\n            rightPriceScale: {\r\n                borderColor: '#4b5563',\r\n            },\r\n            timeScale: {\r\n                borderColor: '#4b5563',\r\n                timeVisible: true,\r\n                secondsVisible: false,\r\n            },\r\n            crosshair: {\r\n                mode: 0,\r\n            },\r\n            watermark: {\r\n                visible: true,\r\n                fontSize: 24,\r\n                horzAlign: 'center',\r\n                vertAlign: 'center',\r\n                color: 'rgba(255, 255, 255, 0.1)',\r\n                text: `${chainName.toUpperCase()} Gas Price (Gwei)`,\r\n            },\r\n        });\r\n        chartRef.current = chart;\r\n\r\n        const newSeries = chart.addLineSeries({\r\n            color: '#60a5fa',\r\n            lineWidth: 2,\r\n            priceFormat: {\r\n                type: 'price',\r\n                precision: 2,\r\n                minMove: 0.01,\r\n            },\r\n        });\r\n        seriesRef.current = newSeries;\r\n\r\n        const handleResize = () => {\r\n            if (chartRef.current && chartContainerRef.current) {\r\n                chartRef.current.applyOptions({\r\n                    width: chartContainerRef.current.clientWidth,\r\n                });\r\n            }\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            if (chartRef.current) {\r\n                chartRef.current.remove();\r\n                chartRef.current = null;\r\n                seriesRef.current = null;\r\n            }\r\n        };\r\n    }, [chartContainerRef]);\r\n\r\n    useEffect(() => {\r\n        if (seriesRef.current) {\r\n            seriesRef.current.setData(data);\r\n        }\r\n        if (chartRef.current) {\r\n            // Update watermark text when chainName changes\r\n            chartRef.current.applyOptions({\r\n                watermark: {\r\n                    text: `${chainName.toUpperCase()} Gas Price (Gwei)`,\r\n                },\r\n            });\r\n        }\r\n    }, [data, chainName]); // Added chainName to dependency array\r\n\r\n    return (\r\n        <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg mt-8\" ref={chartContainerRef}>\r\n            <h3 className=\"text-xl font-semibold text-white mb-4 capitalize\">{chainName} Gas Price Volatility</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Main App Component\r\nconst App = () => {\r\n    const {\r\n        ethGas, polygonGas, arbitrumGas, ethUsdPrice,\r\n        simulationMode, transactionValue, simulatedCosts,\r\n        setEthGas, setPolygonGas, setArbitrumGas, setEthUsdPrice,\r\n        toggleSimulationMode, setTransactionValue, setSimulatedCosts,\r\n        chartData, addChartData, currentChartChain, setCurrentChartChain\r\n    } = useGasStore();\r\n\r\n    useGasFetcher('ethereum', setEthGas, addChartData, currentChartChain);\r\n    useGasFetcher('polygon', setPolygonGas, addChartData, currentChartChain);\r\n    useGasFetcher('arbitrum', setArbitrumGas, addChartData, currentChartChain);\r\n\r\n    // Use the new public API price fetcher\r\n    useEthUsdPriceFetcher(setEthUsdPrice);\r\n\r\n    useEffect(() => {\r\n        if (simulationMode && ethUsdPrice !== null) {\r\n            const gasLimit = 210000;\r\n\r\n            const calculateCost = (gasData, isArbitrum = false) => {\r\n                if (!gasData || gasData.avg === null) return null;\r\n                const avgGwei = parseFloat(gasData.avg);\r\n                let gasCostEth = (avgGwei * gasLimit) / 1_000_000_000;\r\n\r\n                if (isArbitrum && gasData.l1GasEstimate) {\r\n                    gasCostEth += parseFloat(gasData.l1GasEstimate);\r\n                }\r\n\r\n                const txValueInEth = transactionValue;\r\n                return (txValueInEth * ethUsdPrice) + (gasCostEth * ethUsdPrice);\r\n            };\r\n\r\n            setSimulatedCosts({\r\n                eth: calculateCost(ethGas),\r\n                polygon: calculateCost(polygonGas),\r\n                arbitrum: calculateCost(arbitrumGas, true),\r\n            });\r\n        }\r\n    }, [simulationMode, transactionValue, ethUsdPrice, ethGas, polygonGas, arbitrumGas, setSimulatedCosts]);\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-900 text-gray-100 p-8 font-inter\">\r\n            <style>\r\n                {`\r\n                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\r\n                body { font-family: 'Inter', sans-serif; }\r\n                .chart-container {\r\n                    width: 100%;\r\n                    height: 300px; /* Fixed height for the chart */\r\n                }\r\n                `}\r\n            </style>\r\n            <h1 className=\"text-4xl font-bold text-center mb-10 text-blue-400\">\r\n                Cross-Chain Gas Price Tracker & Wallet Simulator\r\n            </h1>\r\n\r\n            <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg mb-8 flex items-center justify-between\">\r\n                <div>\r\n                    <span className=\"text-xl font-medium\">ETH/USD Price:</span>{' '}\r\n                    <span className=\"text-2xl font-bold text-green-400\">\r\n                        {ethUsdPrice ? `$${ethUsdPrice.toFixed(2)}` : 'Fetching...'}\r\n                    </span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-4\">\r\n                    <label htmlFor=\"simulationToggle\" className=\"text-lg font-medium\">Simulation Mode:</label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"simulationToggle\"\r\n                        className=\"toggle toggle-primary\"\r\n                        checked={simulationMode}\r\n                        onChange={toggleSimulationMode}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {simulationMode && (\r\n                <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg mb-8\">\r\n                    <label htmlFor=\"transactionValue\" className=\"block text-lg font-medium mb-2\">\r\n                        Simulate Transaction Value (ETH/MATIC):\r\n                    </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        id=\"transactionValue\"\r\n                        className=\"w-full p-3 rounded-md bg-gray-700 border border-gray-600 focus:ring-blue-500 focus:border-blue-500 text-white\"\r\n                        value={transactionValue}\r\n                        onChange={(e) => setTransactionValue(parseFloat(e.target.value) || 0)}\r\n                        step=\"0.01\"\r\n                        min=\"0\"\r\n                    />\r\n                    <p className=\"text-sm text-gray-400 mt-2\">\r\n                        Enter the value of your transaction (e.g., 0.1 ETH for a swap). This will be converted to USD.\r\n                        Gas costs are added on top.\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"flex flex-wrap gap-6 justify-center mb-8\">\r\n                <GasPriceCard chainName=\"ethereum\" gasData={ethGas} ethUsdPrice={ethUsdPrice} />\r\n                <GasPriceCard chainName=\"polygon\" gasData={polygonGas} ethUsdPrice={ethUsdPrice} />\r\n                <GasPriceCard chainName=\"arbitrum\" gasData={arbitrumGas} ethUsdPrice={ethUsdPrice} l1GasEstimate={arbitrumGas.l1GasEstimate} />\r\n            </div>\r\n\r\n            <h2 className=\"text-3xl font-bold text-center mb-6 text-blue-400\">Gas Price Chart</h2>\r\n            <div className=\"flex justify-center mb-4 space-x-4\">\r\n                <button\r\n                    className={`px-6 py-2 rounded-md font-semibold ${currentChartChain === 'ethereum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\r\n                    onClick={() => setCurrentChartChain('ethereum')}\r\n                >\r\n                    Ethereum\r\n                </button>\r\n                <button\r\n                    className={`px-6 py-2 rounded-md font-semibold ${currentChartChain === 'polygon' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\r\n                    onClick={() => setCurrentChartChain('polygon')}\r\n                >\r\n                    Polygon\r\n                </button>\r\n                <button\r\n                    className={`px-6 py-2 rounded-md font-semibold ${currentChartChain === 'arbitrum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\r\n                    onClick={() => setCurrentChartChain('arbitrum')}\r\n                >\r\n                    Arbitrum\r\n                </button>\r\n            </div>\r\n\r\n            <GasPriceChart data={chartData} chainName={currentChartChain} />\r\n\r\n            <div className=\"mt-12 p-6 bg-gray-800 rounded-lg shadow-lg text-gray-300 text-sm\">\r\n                <h3 className=\"text-xl font-semibold text-white mb-4\">Notes on Implementation:</h3>\r\n                <ul className=\"list-disc list-inside space-y-2\">\r\n                    <li>**RPC Endpoints:** You MUST replace `YOUR_INFURA_PROJECT_ID` in `RPC_URLS` with your actual Infura project ID for the application to function.</li>\r\n                    <li>**Gas Price Estimation:** The \"fast\", \"average\", and \"slow\" gas price estimations are heuristic. Real-world dApps often use more sophisticated algorithms or third-party gas APIs for better accuracy. `maxPriorityFeePerGas` is estimated or fetched via `getFeeData()`.</li>\r\n                    <li>**Arbitrum L1 Gas:** Calculating Arbitrum's L1 gas fee is complex. This implementation uses a simplified placeholder `l1GasEstimate`. A full solution would involve querying Arbitrum-specific RPC methods (e.g., `eth_estimateGas` with specific calldata for L1 portion) or using an Arbitrum SDK.</li>\r\n                    <li>**Uniswap V3 Price:** The `calculateEthUsdPrice` function directly parses `sqrtPriceX96` from Uniswap V3 `Swap` events. It performs the necessary scaling for token decimals (USDC=6, WETH=18) to derive the ETH/USD price. It fetches logs for the last 5 blocks to ensure a recent price.</li>\r\n                    <li>**Chart Data:** For simplicity, the `lightweight-charts` displays a line chart of the \"Average\" gas price. Generating true candlestick data (Open, High, Low, Close) from real-time streaming gas prices would require collecting data points over fixed intervals (e.g., 15 minutes) and then aggregating them.</li>\r\n                    <li>**Transaction Value Simulation:** The `transactionValue` input directly represents the value of the asset being transacted (e.g., 0.1 ETH). The simulated cost adds this value (converted to USD) to the estimated gas cost. The `gasLimit` for simulation is a fixed example value (210,000); actual gas limits vary greatly by transaction type.</li>\r\n                    <li>**Zustand:** The application uses Zustand for global state management, allowing different components to access and update real-time data and simulation parameters.</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}