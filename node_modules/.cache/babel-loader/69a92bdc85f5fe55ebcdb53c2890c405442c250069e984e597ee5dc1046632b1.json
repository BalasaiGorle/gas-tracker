{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\OneDrive\\\\\\u753B\\u50CF\\\\Screenshots\\\\balasai\\\\gas-tracker\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { create } from 'zustand';\nimport { ethers } from 'ethers';\nimport { createChart, ColorType } from 'lightweight-charts';\n\n// Zustand Store Definition\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useGasStore = create(set => ({\n  ethGas: {\n    fast: null,\n    avg: null,\n    slow: null,\n    baseFee: null,\n    priorityFee: null,\n    timestamp: null\n  },\n  polygonGas: {\n    fast: null,\n    avg: null,\n    slow: null,\n    baseFee: null,\n    priorityFee: null,\n    timestamp: null\n  },\n  arbitrumGas: {\n    fast: null,\n    avg: null,\n    slow: null,\n    baseFee: null,\n    priorityFee: null,\n    timestamp: null,\n    l1GasEstimate: null\n  },\n  ethUsdPrice: null,\n  simulationMode: false,\n  transactionValue: 0.01,\n  simulatedCosts: {\n    eth: null,\n    polygon: null,\n    arbitrum: null\n  },\n  chartData: [],\n  currentChartChain: 'ethereum',\n  setEthGas: gas => set({\n    ethGas: gas\n  }),\n  setPolygonGas: gas => set({\n    polygonGas: gas\n  }),\n  setArbitrumGas: gas => set({\n    arbitrumGas: gas\n  }),\n  setEthUsdPrice: price => set({\n    ethUsdPrice: price\n  }),\n  toggleSimulationMode: () => set(state => ({\n    simulationMode: !state.simulationMode\n  })),\n  setTransactionValue: value => set({\n    transactionValue: value\n  }),\n  setSimulatedCosts: costs => set({\n    simulatedCosts: costs\n  }),\n  addChartData: data => set(state => ({\n    chartData: [...state.chartData, data]\n  })),\n  setCurrentChartChain: chain => set({\n    currentChartChain: chain\n  })\n}));\n\n// Constants for RPC URLs and Uniswap V3 Pool\nconst RPC_URLS = {\n  // WebSocket URLs remain direct to Infura\n  ethereum: 'wss://mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\n  polygon: 'wss://polygon-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\n  arbitrum: 'wss://arbitrum-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb'\n};\n\n// Uniswap V3 ETH/USDC 0.05% pool address on Ethereum Mainnet\nconst UNISWAP_V3_ETH_USDC_POOL = '0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640';\n// Uniswap V3 Swap event ABI for parsing logs\nconst UNISWAP_SWAP_EVENT_ABI = [\"event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)\"];\n\n// Helper to calculate ETH/USD from sqrtPriceX96\nconst calculateEthUsdPrice = sqrtPriceX96 => {\n  const Q96 = ethers.BigNumber.from(2).pow(96);\n  const priceX96 = ethers.BigNumber.from(sqrtPriceX96);\n  const price_token0_per_token1_sqrt = Q96.mul(ethers.BigNumber.from(10).pow(12)).div(priceX96);\n  const price_token0_per_token1 = price_token0_per_token1_sqrt.pow(2);\n  const ethUsd = parseFloat(ethers.utils.formatUnits(price_token0_per_token1, 12));\n  return ethUsd;\n};\n\n// Custom Hook for fetching gas prices\nconst useGasFetcher = (chainName, setGas, addChartData, currentChartChain) => {\n  _s();\n  const providerRef = useRef(null);\n  const intervalRef = useRef(null);\n  const fetchGas = useCallback(async () => {\n    if (!providerRef.current) return;\n    try {\n      const block = await providerRef.current.getBlock('latest');\n      const baseFeePerGas = block.baseFeePerGas;\n      let maxPriorityFeePerGas;\n      try {\n        const feeData = await providerRef.current.getFeeData();\n        maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\n      } catch (error) {\n        console.warn(`Could not get fee data for ${chainName}, estimating priority fee.`, error);\n        maxPriorityFeePerGas = ethers.utils.parseUnits(\"1.5\", \"gwei\");\n      }\n      const fastGas = baseFeePerGas.add(maxPriorityFeePerGas.mul(2));\n      const avgGas = baseFeePerGas.add(maxPriorityFeePerGas);\n      const slowGas = baseFeePerGas.add(maxPriorityFeePerGas.div(2));\n      let l1GasEstimate = null;\n      if (chainName === 'arbitrum') {\n        l1GasEstimate = ethers.utils.parseUnits(\"0.00001\", \"ether\");\n      }\n      const now = Date.now();\n      const gasData = {\n        fast: parseFloat(ethers.utils.formatUnits(fastGas, \"gwei\")).toFixed(2),\n        avg: parseFloat(ethers.utils.formatUnits(avgGas, \"gwei\")).toFixed(2),\n        slow: parseFloat(ethers.utils.formatUnits(slowGas, \"gwei\")).toFixed(2),\n        baseFee: parseFloat(ethers.utils.formatUnits(baseFeePerGas, \"gwei\")).toFixed(2),\n        priorityFee: parseFloat(ethers.utils.formatUnits(maxPriorityFeePerGas, \"gwei\")).toFixed(2),\n        timestamp: now,\n        l1GasEstimate: l1GasEstimate ? parseFloat(ethers.utils.formatEther(l1GasEstimate)).toFixed(5) : null\n      };\n      setGas(gasData);\n      if (currentChartChain === chainName) {\n        addChartData({\n          time: now / 1000,\n          value: parseFloat(gasData.avg)\n        });\n      }\n    } catch (error) {\n      console.error(`Error fetching gas for ${chainName}:`, error);\n    }\n  }, [chainName, setGas, addChartData, currentChartChain]);\n  useEffect(() => {\n    if (!RPC_URLS[chainName] || RPC_URLS[chainName].includes('YOUR_INFURA_PROJECT_ID')) {\n      console.error(`Please replace 'YOUR_INFURA_PROJECT_ID' in RPC_URLS for ${chainName}.`);\n      return;\n    }\n    try {\n      providerRef.current = new ethers.providers.WebSocketProvider(RPC_URLS[chainName]);\n      console.log(`Connected to ${chainName} WebSocket.`);\n      fetchGas();\n      intervalRef.current = setInterval(fetchGas, 6000);\n      return () => {\n        if (intervalRef.current) clearInterval(intervalRef.current);\n        if (providerRef.current) {\n          providerRef.current.destroy();\n          console.log(`Disconnected from ${chainName} WebSocket.`);\n        }\n      };\n    } catch (error) {\n      console.error(`Failed to connect to ${chainName} WebSocket:`, error);\n    }\n  }, [chainName, fetchGas]);\n};\n\n// Custom Hook for fetching ETH/USD price from Uniswap V3 logs\n_s(useGasFetcher, \"rAdJuyTYPGo6vv2afotKj+ydvgo=\");\nconst useEthUsdPriceFetcher = setEthUsdPrice => {\n  _s2();\n  const providerRef = useRef(null);\n  const intervalRef = useRef(null);\n  const fetchPrice = useCallback(async () => {\n    // No need for providerRef.current check here as it's set to null below\n    // if (!providerRef.current) return;\n\n    try {\n      // IMPORTANT: Using the local proxy for the JSON RPC request to bypass CORS\n      // The proxy is configured in src/setupProxy.js\n      // The path will be /infura-proxy/v3/YOUR_API_KEY\n      // Note: The API key is hardcoded here for the proxy path.\n      const proxiedInfuraUrl = `/infura-proxy/v3/1c29b2a5aee0449285108945e609e2bb`;\n\n      // Create a new JsonRpcProvider using the proxied URL\n      const proxiedProvider = new ethers.providers.JsonRpcProvider(proxiedInfuraUrl);\n      const latestBlockNumber = await proxiedProvider.getBlockNumber(); // Use proxiedProvider\n      const filter = {\n        address: UNISWAP_V3_ETH_USDC_POOL,\n        topics: [ethers.utils.id(\"Swap(address,address,int256,int256,uint160,uint128,int24)\")],\n        fromBlock: latestBlockNumber - 5,\n        toBlock: latestBlockNumber\n      };\n      const logs = await proxiedProvider.getLogs(filter); // Use the proxied provider\n\n      if (logs.length > 0) {\n        const iface = new ethers.utils.Interface(UNISWAP_SWAP_EVENT_ABI);\n        const parsedLog = iface.parseLog(logs[logs.length - 1]);\n        const sqrtPriceX96 = parsedLog.args.sqrtPriceX96;\n        const ethUsd = calculateEthUsdPrice(sqrtPriceX96);\n        setEthUsdPrice(ethUsd);\n      } else {\n        console.warn(\"No recent Uniswap V3 Swap events found for ETH/USDC pool.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching ETH/USD price:\", error);\n    }\n  }, [setEthUsdPrice]);\n  useEffect(() => {\n    // providerRef.current is set to null here because we are creating a new proxiedProvider\n    // inside the fetchPrice function for each call. This is fine for this setup.\n    providerRef.current = null;\n    console.log(\"Initialized ETH/USD price fetcher (using local proxy for getLogs).\");\n    fetchPrice();\n    intervalRef.current = setInterval(fetchPrice, 15000);\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [fetchPrice]);\n};\n\n// Component for displaying gas prices\n_s2(useEthUsdPriceFetcher, \"25V9+EGWGHQyDcJYdQlFzlZN3UM=\");\nconst GasPriceCard = ({\n  chainName,\n  gasData,\n  ethUsdPrice,\n  l1GasEstimate\n}) => {\n  _s3();\n  const {\n    simulationMode,\n    transactionValue,\n    simulatedCosts\n  } = useGasStore();\n  const getGasCostUsd = gweiPrice => {\n    if (!gweiPrice || !ethUsdPrice) return 'N/A'; // Corrected from 'N/'\n    const gasLimit = 210000;\n    const gasCostEth = parseFloat(gweiPrice) * gasLimit / 1000000000;\n    let totalEthCost = gasCostEth;\n    if (chainName === 'arbitrum' && l1GasEstimate) {\n      totalEthCost += parseFloat(l1GasEstimate);\n    }\n    return (totalEthCost * ethUsdPrice).toFixed(4);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg text-white flex-1 min-w-[280px]\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4 capitalize\",\n      children: [chainName, \" Gas\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }, this), gasData.timestamp ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-400 mb-2\",\n        children: [\"Last Updated: \", new Date(gasData.timestamp).toLocaleTimeString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 gap-2 text-sm\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Base Fee:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.baseFee, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Priority Fee:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.priorityFee, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 45\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Slow:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.slow, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 37\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Average:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.avg, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 40\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fast:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"font-mono\",\n          children: [gasData.fast, \" Gwei\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 37\n        }, this), chainName === 'arbitrum' && l1GasEstimate && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"L1 Gas Est.:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"font-mono\",\n            children: [l1GasEstimate, \" ETH\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 52\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 21\n      }, this), simulationMode && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4 pt-4 border-t border-gray-700\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-md font-medium mb-2\",\n          children: \"Simulated Cost (Avg Gas)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-lg font-bold text-green-400\",\n          children: [\"$\", simulatedCosts[chainName] !== null ? simulatedCosts[chainName].toFixed(4) : 'Calculating...']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-xs text-gray-400 mt-1\",\n          children: [\"(Transaction Value: \", transactionValue, \" \", chainName === 'ethereum' ? 'ETH' : 'MATIC', \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-gray-400\",\n      children: [\"Connecting to \", chainName, \"...\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 9\n  }, this);\n};\n\n// Candlestick Chart Component\n_s3(GasPriceCard, \"R8Y1kubf/F8MvzjohrJrsDbSVNE=\", false, function () {\n  return [useGasStore];\n});\n_c = GasPriceCard;\nconst GasPriceChart = ({\n  data,\n  chainName\n}) => {\n  _s4();\n  const chartContainerRef = useRef();\n  const chartRef = useRef(null);\n  const seriesRef = useRef(null);\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    const chart = createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: 300,\n      layout: {\n        backgroundColor: ColorType.Solid,\n        background: {\n          type: ColorType.Solid,\n          color: '#1f2937'\n        },\n        textColor: '#d1d5db'\n      },\n      grid: {\n        vertLines: {\n          color: '#374151'\n        },\n        horzLines: {\n          color: '#374151'\n        }\n      },\n      rightPriceScale: {\n        borderColor: '#4b5563'\n      },\n      timeScale: {\n        borderColor: '#4b5563',\n        timeVisible: true,\n        secondsVisible: false\n      },\n      crosshair: {\n        mode: 0\n      },\n      watermark: {\n        visible: true,\n        fontSize: 24,\n        horzAlign: 'center',\n        vertAlign: 'center',\n        color: 'rgba(255, 255, 255, 0.1)',\n        text: `${chainName.toUpperCase()} Gas Price (Gwei)`\n      }\n    });\n    chartRef.current = chart;\n    const newSeries = chart.addLineSeries({\n      color: '#60a5fa',\n      lineWidth: 2,\n      priceFormat: {\n        type: 'price',\n        precision: 2,\n        minMove: 0.01\n      }\n    });\n    seriesRef.current = newSeries;\n    const handleResize = () => {\n      if (chartRef.current && chartContainerRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n        seriesRef.current = null;\n      }\n    };\n  }, [chartContainerRef]);\n  useEffect(() => {\n    if (seriesRef.current) {\n      seriesRef.current.setData(data);\n    }\n    if (chartRef.current) {\n      chartRef.current.applyOptions({\n        watermark: {\n          text: `${chainName.toUpperCase()} Gas Price (Gwei)`\n        }\n      });\n    }\n  }, [data, chainName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gray-800 p-6 rounded-lg shadow-lg mt-8\",\n    ref: chartContainerRef,\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold text-white mb-4 capitalize\",\n      children: [chainName, \" Gas Price Volatility\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 9\n  }, this);\n};\n\n// Main App Component\n_s4(GasPriceChart, \"ImyjEbaYv8MURJd0mtw+FDP2AOc=\");\n_c2 = GasPriceChart;\nconst App = () => {\n  _s5();\n  const {\n    ethGas,\n    polygonGas,\n    arbitrumGas,\n    ethUsdPrice,\n    simulationMode,\n    transactionValue,\n    simulatedCosts,\n    setEthGas,\n    setPolygonGas,\n    setArbitrumGas,\n    setEthUsdPrice,\n    toggleSimulationMode,\n    setTransactionValue,\n    setSimulatedCosts,\n    chartData,\n    addChartData,\n    currentChartChain,\n    setCurrentChartChain\n  } = useGasStore();\n  useGasFetcher('ethereum', setEthGas, addChartData, currentChartChain);\n  useGasFetcher('polygon', setPolygonGas, addChartData, currentChartChain);\n  useGasFetcher('arbitrum', setArbitrumGas, addChartData, currentChartChain);\n  useEthUsdPriceFetcher(setEthUsdPrice);\n  useEffect(() => {\n    if (simulationMode && ethUsdPrice !== null) {\n      const gasLimit = 210000;\n      const calculateCost = (gasData, isArbitrum = false) => {\n        if (!gasData || gasData.avg === null) return null;\n        const avgGwei = parseFloat(gasData.avg);\n        let gasCostEth = avgGwei * gasLimit / 1000000000;\n        if (isArbitrum && gasData.l1GasEstimate) {\n          gasCostEth += parseFloat(gasData.l1GasEstimate);\n        }\n        const txValueInEth = transactionValue;\n        return txValueInEth * ethUsdPrice + gasCostEth * ethUsdPrice;\n      };\n      setSimulatedCosts({\n        eth: calculateCost(ethGas),\n        polygon: calculateCost(polygonGas),\n        arbitrum: calculateCost(arbitrumGas, true)\n      });\n    }\n  }, [simulationMode, transactionValue, ethUsdPrice, ethGas, polygonGas, arbitrumGas, setSimulatedCosts]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gray-900 text-gray-100 p-8 font-inter\",\n    children: [/*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n                body { font-family: 'Inter', sans-serif; }\n                .chart-container {\n                    width: 100%;\n                    height: 300px; /* Fixed height for the chart */\n                }\n                `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-4xl font-bold text-center mb-10 text-blue-400\",\n      children: \"Cross-Chain Gas Price Tracker & Wallet Simulator\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-6 rounded-lg shadow-lg mb-8 flex items-center justify-between\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xl font-medium\",\n          children: \"ETH/USD Price:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 21\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-2xl font-bold text-green-400\",\n          children: ethUsdPrice ? `$${ethUsdPrice.toFixed(2)}` : 'Fetching...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center space-x-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"simulationToggle\",\n          className: \"text-lg font-medium\",\n          children: \"Simulation Mode:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"simulationToggle\",\n          className: \"toggle toggle-primary\",\n          checked: simulationMode,\n          onChange: toggleSimulationMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 13\n    }, this), simulationMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-gray-800 p-6 rounded-lg shadow-lg mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"transactionValue\",\n        className: \"block text-lg font-medium mb-2\",\n        children: \"Simulate Transaction Value (ETH/MATIC):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"transactionValue\",\n        className: \"w-full p-3 rounded-md bg-gray-700 border border-gray-600 focus:ring-blue-500 focus:border-blue-500 text-white\",\n        value: transactionValue,\n        onChange: e => setTransactionValue(parseFloat(e.target.value) || 0),\n        step: \"0.01\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-sm text-gray-400 mt-2\",\n        children: \"Enter the value of your transaction (e.g., 0.1 ETH for a swap). This will be converted to USD. Gas costs are added on top.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-wrap gap-6 justify-center mb-8\",\n      children: [/*#__PURE__*/_jsxDEV(GasPriceCard, {\n        chainName: \"ethereum\",\n        gasData: ethGas,\n        ethUsdPrice: ethUsdPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GasPriceCard, {\n        chainName: \"polygon\",\n        gasData: polygonGas,\n        ethUsdPrice: ethUsdPrice\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GasPriceCard, {\n        chainName: \"arbitrum\",\n        gasData: arbitrumGas,\n        ethUsdPrice: ethUsdPrice,\n        l1GasEstimate: arbitrumGas.l1GasEstimate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold text-center mb-6 text-blue-400\",\n      children: \"Gas Price Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center mb-4 space-x-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-2 rounded-md font-semibold ${currentChartChain === 'ethereum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`,\n        onClick: () => setCurrentChartChain('ethereum'),\n        children: \"Ethereum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-2 rounded-md font-semibold ${currentChartChain === 'polygon' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`,\n        onClick: () => setCurrentChartChain('polygon'),\n        children: \"Polygon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `px-6 py-2 rounded-md font-semibold ${currentChartChain === 'arbitrum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`,\n        onClick: () => setCurrentChartChain('arbitrum'),\n        children: \"Arbitrum\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GasPriceChart, {\n      data: chartData,\n      chainName: currentChartChain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-12 p-6 bg-gray-800 rounded-lg shadow-lg text-gray-300 text-sm\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-xl font-semibold text-white mb-4\",\n        children: \"Notes on Implementation:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-disc list-inside space-y-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**RPC Endpoints:** You MUST replace `YOUR_INFURA_PROJECT_ID` in `RPC_URLS` with your actual Infura project ID for the application to function.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Gas Price Estimation:** The \\\"fast\\\", \\\"average\\\", and \\\"slow\\\" gas price estimations are heuristic. Real-world dApps often use more sophisticated algorithms or third-party gas APIs for better accuracy. `maxPriorityFeePerGas` is estimated or fetched via `getFeeData()`.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Arbitrum L1 Gas:** Calculating Arbitrum's L1 gas fee is complex. This implementation uses a simplified placeholder `l1GasEstimate`. A full solution would involve querying Arbitrum-specific RPC methods (e.g., `eth_estimateGas` with specific calldata for L1 portion) or using an Arbitrum SDK.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Uniswap V3 Price:** The `calculateEthUsdPrice` function directly parses `sqrtPriceX96` from Uniswap V3 `Swap` events. It performs the necessary scaling for token decimals (USDC=6, WETH=18) to derive the ETH/USD price. It fetches logs for the last 5 blocks to ensure a recent price.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Chart Data:** For simplicity, the `lightweight-charts` displays a line chart of the \\\"Average\\\" gas price. Generating true candlestick data (Open, High, Low, Close) from real-time streaming gas prices would require collecting data points over fixed intervals (e.g., 15 minutes) and then aggregating them.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Transaction Value Simulation:** The `transactionValue` input directly represents the value of the asset being transacted (e.g., 0.1 ETH). The simulated cost adds this value (converted to USD) to the estimated gas cost. The `gasLimit` for simulation is a fixed example value (210,000); actual gas limits vary greatly by transaction type.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 475,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"**Zustand:** The application uses Zustand for global state management, allowing different components to access and update real-time data and simulation parameters.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 382,\n    columnNumber: 9\n  }, this);\n};\n_s5(App, \"oDp+0u79KeooZS7Jb0AHnbsmLnY=\", false, function () {\n  return [useGasStore, useGasFetcher, useGasFetcher, useGasFetcher, useEthUsdPriceFetcher];\n});\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"GasPriceCard\");\n$RefreshReg$(_c2, \"GasPriceChart\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","create","ethers","createChart","ColorType","jsxDEV","_jsxDEV","Fragment","_Fragment","useGasStore","set","ethGas","fast","avg","slow","baseFee","priorityFee","timestamp","polygonGas","arbitrumGas","l1GasEstimate","ethUsdPrice","simulationMode","transactionValue","simulatedCosts","eth","polygon","arbitrum","chartData","currentChartChain","setEthGas","gas","setPolygonGas","setArbitrumGas","setEthUsdPrice","price","toggleSimulationMode","state","setTransactionValue","value","setSimulatedCosts","costs","addChartData","data","setCurrentChartChain","chain","RPC_URLS","ethereum","UNISWAP_V3_ETH_USDC_POOL","UNISWAP_SWAP_EVENT_ABI","calculateEthUsdPrice","sqrtPriceX96","Q96","BigNumber","from","pow","priceX96","price_token0_per_token1_sqrt","mul","div","price_token0_per_token1","ethUsd","parseFloat","utils","formatUnits","useGasFetcher","chainName","setGas","_s","providerRef","intervalRef","fetchGas","current","block","getBlock","baseFeePerGas","maxPriorityFeePerGas","feeData","getFeeData","error","console","warn","parseUnits","fastGas","add","avgGas","slowGas","now","Date","gasData","toFixed","formatEther","time","includes","providers","WebSocketProvider","log","setInterval","clearInterval","destroy","useEthUsdPriceFetcher","_s2","fetchPrice","proxiedInfuraUrl","proxiedProvider","JsonRpcProvider","latestBlockNumber","getBlockNumber","filter","address","topics","id","fromBlock","toBlock","logs","getLogs","length","iface","Interface","parsedLog","parseLog","args","GasPriceCard","_s3","getGasCostUsd","gweiPrice","gasLimit","gasCostEth","totalEthCost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toLocaleTimeString","_c","GasPriceChart","_s4","chartContainerRef","chartRef","seriesRef","chart","width","clientWidth","height","layout","backgroundColor","Solid","background","type","color","textColor","grid","vertLines","horzLines","rightPriceScale","borderColor","timeScale","timeVisible","secondsVisible","crosshair","mode","watermark","visible","fontSize","horzAlign","vertAlign","text","toUpperCase","newSeries","addLineSeries","lineWidth","priceFormat","precision","minMove","handleResize","applyOptions","window","addEventListener","removeEventListener","remove","setData","ref","_c2","App","_s5","calculateCost","isArbitrum","avgGwei","txValueInEth","htmlFor","checked","onChange","e","target","step","min","onClick","_c3","$RefreshReg$"],"sources":["C:/Users/DELL/OneDrive/画像/Screenshots/balasai/gas-tracker/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport { create } from 'zustand';\r\nimport { ethers } from 'ethers';\r\nimport { createChart, ColorType } from 'lightweight-charts';\r\n\r\n// Zustand Store Definition\r\nconst useGasStore = create((set) => ({\r\n    ethGas: { fast: null, avg: null, slow: null, baseFee: null, priorityFee: null, timestamp: null },\r\n    polygonGas: { fast: null, avg: null, slow: null, baseFee: null, priorityFee: null, timestamp: null },\r\n    arbitrumGas: { fast: null, avg: null, slow: null, baseFee: null, priorityFee: null, timestamp: null, l1GasEstimate: null },\r\n    ethUsdPrice: null,\r\n    simulationMode: false,\r\n    transactionValue: 0.01,\r\n    simulatedCosts: { eth: null, polygon: null, arbitrum: null },\r\n    chartData: [],\r\n    currentChartChain: 'ethereum',\r\n\r\n    setEthGas: (gas) => set({ ethGas: gas }),\r\n    setPolygonGas: (gas) => set({ polygonGas: gas }),\r\n    setArbitrumGas: (gas) => set({ arbitrumGas: gas }),\r\n    setEthUsdPrice: (price) => set({ ethUsdPrice: price }),\r\n    toggleSimulationMode: () => set((state) => ({ simulationMode: !state.simulationMode })),\r\n    setTransactionValue: (value) => set({ transactionValue: value }),\r\n    setSimulatedCosts: (costs) => set({ simulatedCosts: costs }),\r\n    addChartData: (data) => set((state) => ({ chartData: [...state.chartData, data] })),\r\n    setCurrentChartChain: (chain) => set({ currentChartChain: chain }),\r\n}));\r\n\r\n// Constants for RPC URLs and Uniswap V3 Pool\r\nconst RPC_URLS = {\r\n    // WebSocket URLs remain direct to Infura\r\n    ethereum: 'wss://mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\r\n    polygon: 'wss://polygon-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\r\n    arbitrum: 'wss://arbitrum-mainnet.infura.io/ws/v3/1c29b2a5aee0449285108945e609e2bb',\r\n};\r\n\r\n// Uniswap V3 ETH/USDC 0.05% pool address on Ethereum Mainnet\r\nconst UNISWAP_V3_ETH_USDC_POOL = '0x88e6A0c2dDD26FEEb64F039a2c41296FcB3f5640';\r\n// Uniswap V3 Swap event ABI for parsing logs\r\nconst UNISWAP_SWAP_EVENT_ABI = [\r\n    \"event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 sqrtPriceX96, uint128 liquidity, int24 tick)\"\r\n];\r\n\r\n// Helper to calculate ETH/USD from sqrtPriceX96\r\nconst calculateEthUsdPrice = (sqrtPriceX96) => {\r\n    const Q96 = ethers.BigNumber.from(2).pow(96);\r\n    const priceX96 = ethers.BigNumber.from(sqrtPriceX96);\r\n\r\n    const price_token0_per_token1_sqrt = Q96.mul(ethers.BigNumber.from(10).pow(12)).div(priceX96);\r\n    const price_token0_per_token1 = price_token0_per_token1_sqrt.pow(2);\r\n    const ethUsd = parseFloat(ethers.utils.formatUnits(price_token0_per_token1, 12));\r\n\r\n    return ethUsd;\r\n};\r\n\r\n\r\n// Custom Hook for fetching gas prices\r\nconst useGasFetcher = (chainName, setGas, addChartData, currentChartChain) => {\r\n    const providerRef = useRef(null);\r\n    const intervalRef = useRef(null);\r\n\r\n    const fetchGas = useCallback(async () => {\r\n        if (!providerRef.current) return;\r\n\r\n        try {\r\n            const block = await providerRef.current.getBlock('latest');\r\n            const baseFeePerGas = block.baseFeePerGas;\r\n\r\n            let maxPriorityFeePerGas;\r\n            try {\r\n                const feeData = await providerRef.current.getFeeData();\r\n                maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;\r\n            } catch (error) {\r\n                console.warn(`Could not get fee data for ${chainName}, estimating priority fee.`, error);\r\n                maxPriorityFeePerGas = ethers.utils.parseUnits(\"1.5\", \"gwei\");\r\n            }\r\n\r\n            const fastGas = baseFeePerGas.add(maxPriorityFeePerGas.mul(2));\r\n            const avgGas = baseFeePerGas.add(maxPriorityFeePerGas);\r\n            const slowGas = baseFeePerGas.add(maxPriorityFeePerGas.div(2));\r\n\r\n            let l1GasEstimate = null;\r\n            if (chainName === 'arbitrum') {\r\n                l1GasEstimate = ethers.utils.parseUnits(\"0.00001\", \"ether\");\r\n            }\r\n\r\n            const now = Date.now();\r\n            const gasData = {\r\n                fast: parseFloat(ethers.utils.formatUnits(fastGas, \"gwei\")).toFixed(2),\r\n                avg: parseFloat(ethers.utils.formatUnits(avgGas, \"gwei\")).toFixed(2),\r\n                slow: parseFloat(ethers.utils.formatUnits(slowGas, \"gwei\")).toFixed(2),\r\n                baseFee: parseFloat(ethers.utils.formatUnits(baseFeePerGas, \"gwei\")).toFixed(2),\r\n                priorityFee: parseFloat(ethers.utils.formatUnits(maxPriorityFeePerGas, \"gwei\")).toFixed(2),\r\n                timestamp: now,\r\n                l1GasEstimate: l1GasEstimate ? parseFloat(ethers.utils.formatEther(l1GasEstimate)).toFixed(5) : null,\r\n            };\r\n            setGas(gasData);\r\n\r\n            if (currentChartChain === chainName) {\r\n                addChartData({ time: now / 1000, value: parseFloat(gasData.avg) });\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(`Error fetching gas for ${chainName}:`, error);\r\n        }\r\n    }, [chainName, setGas, addChartData, currentChartChain]);\r\n\r\n    useEffect(() => {\r\n        if (!RPC_URLS[chainName] || RPC_URLS[chainName].includes('YOUR_INFURA_PROJECT_ID')) {\r\n            console.error(`Please replace 'YOUR_INFURA_PROJECT_ID' in RPC_URLS for ${chainName}.`);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            providerRef.current = new ethers.providers.WebSocketProvider(RPC_URLS[chainName]);\r\n            console.log(`Connected to ${chainName} WebSocket.`);\r\n\r\n            fetchGas();\r\n            intervalRef.current = setInterval(fetchGas, 6000);\r\n\r\n            return () => {\r\n                if (intervalRef.current) clearInterval(intervalRef.current);\r\n                if (providerRef.current) {\r\n                    providerRef.current.destroy();\r\n                    console.log(`Disconnected from ${chainName} WebSocket.`);\r\n                }\r\n            };\r\n        } catch (error) {\r\n            console.error(`Failed to connect to ${chainName} WebSocket:`, error);\r\n        }\r\n    }, [chainName, fetchGas]);\r\n};\r\n\r\n// Custom Hook for fetching ETH/USD price from Uniswap V3 logs\r\nconst useEthUsdPriceFetcher = (setEthUsdPrice) => {\r\n    const providerRef = useRef(null);\r\n    const intervalRef = useRef(null);\r\n\r\n    const fetchPrice = useCallback(async () => {\r\n        // No need for providerRef.current check here as it's set to null below\r\n        // if (!providerRef.current) return;\r\n\r\n        try {\r\n            // IMPORTANT: Using the local proxy for the JSON RPC request to bypass CORS\r\n            // The proxy is configured in src/setupProxy.js\r\n            // The path will be /infura-proxy/v3/YOUR_API_KEY\r\n            // Note: The API key is hardcoded here for the proxy path.\r\n            const proxiedInfuraUrl = `/infura-proxy/v3/1c29b2a5aee0449285108945e609e2bb`;\r\n\r\n            // Create a new JsonRpcProvider using the proxied URL\r\n            const proxiedProvider = new ethers.providers.JsonRpcProvider(proxiedInfuraUrl);\r\n\r\n            const latestBlockNumber = await proxiedProvider.getBlockNumber(); // Use proxiedProvider\r\n            const filter = {\r\n                address: UNISWAP_V3_ETH_USDC_POOL,\r\n                topics: [ethers.utils.id(\"Swap(address,address,int256,int256,uint160,uint128,int24)\")],\r\n                fromBlock: latestBlockNumber - 5,\r\n                toBlock: latestBlockNumber,\r\n            };\r\n\r\n            const logs = await proxiedProvider.getLogs(filter); // Use the proxied provider\r\n\r\n            if (logs.length > 0) {\r\n                const iface = new ethers.utils.Interface(UNISWAP_SWAP_EVENT_ABI);\r\n                const parsedLog = iface.parseLog(logs[logs.length - 1]);\r\n\r\n                const sqrtPriceX96 = parsedLog.args.sqrtPriceX96;\r\n                const ethUsd = calculateEthUsdPrice(sqrtPriceX96);\r\n                setEthUsdPrice(ethUsd);\r\n            } else {\r\n                console.warn(\"No recent Uniswap V3 Swap events found for ETH/USDC pool.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error fetching ETH/USD price:\", error);\r\n        }\r\n    }, [setEthUsdPrice]);\r\n\r\n    useEffect(() => {\r\n        // providerRef.current is set to null here because we are creating a new proxiedProvider\r\n        // inside the fetchPrice function for each call. This is fine for this setup.\r\n        providerRef.current = null;\r\n        console.log(\"Initialized ETH/USD price fetcher (using local proxy for getLogs).\");\r\n\r\n        fetchPrice();\r\n        intervalRef.current = setInterval(fetchPrice, 15000);\r\n\r\n        return () => {\r\n            if (intervalRef.current) clearInterval(intervalRef.current);\r\n        };\r\n    }, [fetchPrice]);\r\n};\r\n\r\n// Component for displaying gas prices\r\nconst GasPriceCard = ({ chainName, gasData, ethUsdPrice, l1GasEstimate }) => {\r\n    const { simulationMode, transactionValue, simulatedCosts } = useGasStore();\r\n\r\n    const getGasCostUsd = (gweiPrice) => {\r\n        if (!gweiPrice || !ethUsdPrice) return 'N/A'; // Corrected from 'N/'\r\n        const gasLimit = 210000;\r\n        const gasCostEth = (parseFloat(gweiPrice) * gasLimit) / 1_000_000_000;\r\n        let totalEthCost = gasCostEth;\r\n\r\n        if (chainName === 'arbitrum' && l1GasEstimate) {\r\n            totalEthCost += parseFloat(l1GasEstimate);\r\n        }\r\n        return (totalEthCost * ethUsdPrice).toFixed(4);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg text-white flex-1 min-w-[280px]\">\r\n            <h3 className=\"text-xl font-semibold mb-4 capitalize\">{chainName} Gas</h3>\r\n            {gasData.timestamp ? (\r\n                <>\r\n                    <p className=\"text-sm text-gray-400 mb-2\">Last Updated: {new Date(gasData.timestamp).toLocaleTimeString()}</p>\r\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                        <p>Base Fee:</p><p className=\"font-mono\">{gasData.baseFee} Gwei</p>\r\n                        <p>Priority Fee:</p><p className=\"font-mono\">{gasData.priorityFee} Gwei</p>\r\n                        <p>Slow:</p><p className=\"font-mono\">{gasData.slow} Gwei</p>\r\n                        <p>Average:</p><p className=\"font-mono\">{gasData.avg} Gwei</p>\r\n                        <p>Fast:</p><p className=\"font-mono\">{gasData.fast} Gwei</p>\r\n                        {chainName === 'arbitrum' && l1GasEstimate && (\r\n                            <>\r\n                                <p>L1 Gas Est.:</p><p className=\"font-mono\">{l1GasEstimate} ETH</p>\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                    {simulationMode && (\r\n                        <div className=\"mt-4 pt-4 border-t border-gray-700\">\r\n                            <h4 className=\"text-md font-medium mb-2\">Simulated Cost (Avg Gas)</h4>\r\n                            <p className=\"text-lg font-bold text-green-400\">\r\n                                ${simulatedCosts[chainName] !== null ? simulatedCosts[chainName].toFixed(4) : 'Calculating...'}\r\n                            </p>\r\n                            <p className=\"text-xs text-gray-400 mt-1\">\r\n                                (Transaction Value: {transactionValue} {chainName === 'ethereum' ? 'ETH' : 'MATIC'})\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <p className=\"text-gray-400\">Connecting to {chainName}...</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Candlestick Chart Component\r\nconst GasPriceChart = ({ data, chainName }) => {\r\n    const chartContainerRef = useRef();\r\n    const chartRef = useRef(null);\r\n    const seriesRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        if (!chartContainerRef.current) return;\r\n\r\n        const chart = createChart(chartContainerRef.current, {\r\n            width: chartContainerRef.current.clientWidth,\r\n            height: 300,\r\n            layout: {\r\n                backgroundColor: ColorType.Solid,\r\n                background: { type: ColorType.Solid, color: '#1f2937' },\r\n                textColor: '#d1d5db',\r\n            },\r\n            grid: {\r\n                vertLines: { color: '#374151' },\r\n                horzLines: { color: '#374151' },\r\n            },\r\n            rightPriceScale: {\r\n                borderColor: '#4b5563',\r\n            },\r\n            timeScale: {\r\n                borderColor: '#4b5563',\r\n                timeVisible: true,\r\n                secondsVisible: false,\r\n            },\r\n            crosshair: {\r\n                mode: 0,\r\n            },\r\n            watermark: {\r\n                visible: true,\r\n                fontSize: 24,\r\n                horzAlign: 'center',\r\n                vertAlign: 'center',\r\n                color: 'rgba(255, 255, 255, 0.1)',\r\n                text: `${chainName.toUpperCase()} Gas Price (Gwei)`,\r\n            },\r\n        });\r\n        chartRef.current = chart;\r\n\r\n        const newSeries = chart.addLineSeries({\r\n            color: '#60a5fa',\r\n            lineWidth: 2,\r\n            priceFormat: {\r\n                type: 'price',\r\n                precision: 2,\r\n                minMove: 0.01,\r\n            },\r\n        });\r\n        seriesRef.current = newSeries;\r\n\r\n        const handleResize = () => {\r\n            if (chartRef.current && chartContainerRef.current) {\r\n                chartRef.current.applyOptions({\r\n                    width: chartContainerRef.current.clientWidth,\r\n                });\r\n            }\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n\r\n        return () => {\r\n            window.removeEventListener('resize', handleResize);\r\n            if (chartRef.current) {\r\n                chartRef.current.remove();\r\n                chartRef.current = null;\r\n                seriesRef.current = null;\r\n            }\r\n        };\r\n    }, [chartContainerRef]);\r\n\r\n    useEffect(() => {\r\n        if (seriesRef.current) {\r\n            seriesRef.current.setData(data);\r\n        }\r\n        if (chartRef.current) {\r\n            chartRef.current.applyOptions({\r\n                watermark: {\r\n                    text: `${chainName.toUpperCase()} Gas Price (Gwei)`,\r\n                },\r\n            });\r\n        }\r\n    }, [data, chainName]);\r\n\r\n    return (\r\n        <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg mt-8\" ref={chartContainerRef}>\r\n            <h3 className=\"text-xl font-semibold text-white mb-4 capitalize\">{chainName} Gas Price Volatility</h3>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Main App Component\r\nconst App = () => {\r\n    const {\r\n        ethGas, polygonGas, arbitrumGas, ethUsdPrice,\r\n        simulationMode, transactionValue, simulatedCosts,\r\n        setEthGas, setPolygonGas, setArbitrumGas, setEthUsdPrice,\r\n        toggleSimulationMode, setTransactionValue, setSimulatedCosts,\r\n        chartData, addChartData, currentChartChain, setCurrentChartChain\r\n    } = useGasStore();\r\n\r\n    useGasFetcher('ethereum', setEthGas, addChartData, currentChartChain);\r\n    useGasFetcher('polygon', setPolygonGas, addChartData, currentChartChain);\r\n    useGasFetcher('arbitrum', setArbitrumGas, addChartData, currentChartChain);\r\n\r\n    useEthUsdPriceFetcher(setEthUsdPrice);\r\n\r\n    useEffect(() => {\r\n        if (simulationMode && ethUsdPrice !== null) {\r\n            const gasLimit = 210000;\r\n\r\n            const calculateCost = (gasData, isArbitrum = false) => {\r\n                if (!gasData || gasData.avg === null) return null;\r\n                const avgGwei = parseFloat(gasData.avg);\r\n                let gasCostEth = (avgGwei * gasLimit) / 1_000_000_000;\r\n\r\n                if (isArbitrum && gasData.l1GasEstimate) {\r\n                    gasCostEth += parseFloat(gasData.l1GasEstimate);\r\n                }\r\n\r\n                const txValueInEth = transactionValue;\r\n                return (txValueInEth * ethUsdPrice) + (gasCostEth * ethUsdPrice);\r\n            };\r\n\r\n            setSimulatedCosts({\r\n                eth: calculateCost(ethGas),\r\n                polygon: calculateCost(polygonGas),\r\n                arbitrum: calculateCost(arbitrumGas, true),\r\n            });\r\n        }\r\n    }, [simulationMode, transactionValue, ethUsdPrice, ethGas, polygonGas, arbitrumGas, setSimulatedCosts]);\r\n\r\n    return (\r\n        <div className=\"min-h-screen bg-gray-900 text-gray-100 p-8 font-inter\">\r\n            <style>\r\n                {`\r\n                @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\r\n                body { font-family: 'Inter', sans-serif; }\r\n                .chart-container {\r\n                    width: 100%;\r\n                    height: 300px; /* Fixed height for the chart */\r\n                }\r\n                `}\r\n            </style>\r\n            <h1 className=\"text-4xl font-bold text-center mb-10 text-blue-400\">\r\n                Cross-Chain Gas Price Tracker & Wallet Simulator\r\n            </h1>\r\n\r\n            <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg mb-8 flex items-center justify-between\">\r\n                <div>\r\n                    <span className=\"text-xl font-medium\">ETH/USD Price:</span>{' '}\r\n                    <span className=\"text-2xl font-bold text-green-400\">\r\n                        {ethUsdPrice ? `$${ethUsdPrice.toFixed(2)}` : 'Fetching...'}\r\n                    </span>\r\n                </div>\r\n                <div className=\"flex items-center space-x-4\">\r\n                    <label htmlFor=\"simulationToggle\" className=\"text-lg font-medium\">Simulation Mode:</label>\r\n                    <input\r\n                        type=\"checkbox\"\r\n                        id=\"simulationToggle\"\r\n                        className=\"toggle toggle-primary\"\r\n                        checked={simulationMode}\r\n                        onChange={toggleSimulationMode}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {simulationMode && (\r\n                <div className=\"bg-gray-800 p-6 rounded-lg shadow-lg mb-8\">\r\n                    <label htmlFor=\"transactionValue\" className=\"block text-lg font-medium mb-2\">\r\n                        Simulate Transaction Value (ETH/MATIC):\r\n                    </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        id=\"transactionValue\"\r\n                        className=\"w-full p-3 rounded-md bg-gray-700 border border-gray-600 focus:ring-blue-500 focus:border-blue-500 text-white\"\r\n                        value={transactionValue}\r\n                        onChange={(e) => setTransactionValue(parseFloat(e.target.value) || 0)}\r\n                        step=\"0.01\"\r\n                        min=\"0\"\r\n                    />\r\n                    <p className=\"text-sm text-gray-400 mt-2\">\r\n                        Enter the value of your transaction (e.g., 0.1 ETH for a swap). This will be converted to USD.\r\n                        Gas costs are added on top.\r\n                    </p>\r\n                </div>\r\n            )}\r\n\r\n            <div className=\"flex flex-wrap gap-6 justify-center mb-8\">\r\n                <GasPriceCard chainName=\"ethereum\" gasData={ethGas} ethUsdPrice={ethUsdPrice} />\r\n                <GasPriceCard chainName=\"polygon\" gasData={polygonGas} ethUsdPrice={ethUsdPrice} />\r\n                <GasPriceCard chainName=\"arbitrum\" gasData={arbitrumGas} ethUsdPrice={ethUsdPrice} l1GasEstimate={arbitrumGas.l1GasEstimate} />\r\n            </div>\r\n\r\n            <h2 className=\"text-3xl font-bold text-center mb-6 text-blue-400\">Gas Price Chart</h2>\r\n            <div className=\"flex justify-center mb-4 space-x-4\">\r\n                <button\r\n                    className={`px-6 py-2 rounded-md font-semibold ${currentChartChain === 'ethereum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\r\n                    onClick={() => setCurrentChartChain('ethereum')}\r\n                >\r\n                    Ethereum\r\n                </button>\r\n                <button\r\n                    className={`px-6 py-2 rounded-md font-semibold ${currentChartChain === 'polygon' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\r\n                    onClick={() => setCurrentChartChain('polygon')}\r\n                >\r\n                    Polygon\r\n                </button>\r\n                <button\r\n                    className={`px-6 py-2 rounded-md font-semibold ${currentChartChain === 'arbitrum' ? 'bg-blue-600 text-white' : 'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}\r\n                    onClick={() => setCurrentChartChain('arbitrum')}\r\n                >\r\n                    Arbitrum\r\n                </button>\r\n            </div>\r\n\r\n            <GasPriceChart data={chartData} chainName={currentChartChain} />\r\n\r\n            <div className=\"mt-12 p-6 bg-gray-800 rounded-lg shadow-lg text-gray-300 text-sm\">\r\n                <h3 className=\"text-xl font-semibold text-white mb-4\">Notes on Implementation:</h3>\r\n                <ul className=\"list-disc list-inside space-y-2\">\r\n                    <li>**RPC Endpoints:** You MUST replace `YOUR_INFURA_PROJECT_ID` in `RPC_URLS` with your actual Infura project ID for the application to function.</li>\r\n                    <li>**Gas Price Estimation:** The \"fast\", \"average\", and \"slow\" gas price estimations are heuristic. Real-world dApps often use more sophisticated algorithms or third-party gas APIs for better accuracy. `maxPriorityFeePerGas` is estimated or fetched via `getFeeData()`.</li>\r\n                    <li>**Arbitrum L1 Gas:** Calculating Arbitrum's L1 gas fee is complex. This implementation uses a simplified placeholder `l1GasEstimate`. A full solution would involve querying Arbitrum-specific RPC methods (e.g., `eth_estimateGas` with specific calldata for L1 portion) or using an Arbitrum SDK.</li>\r\n                    <li>**Uniswap V3 Price:** The `calculateEthUsdPrice` function directly parses `sqrtPriceX96` from Uniswap V3 `Swap` events. It performs the necessary scaling for token decimals (USDC=6, WETH=18) to derive the ETH/USD price. It fetches logs for the last 5 blocks to ensure a recent price.</li>\r\n                    <li>**Chart Data:** For simplicity, the `lightweight-charts` displays a line chart of the \"Average\" gas price. Generating true candlestick data (Open, High, Low, Close) from real-time streaming gas prices would require collecting data points over fixed intervals (e.g., 15 minutes) and then aggregating them.</li>\r\n                    <li>**Transaction Value Simulation:** The `transactionValue` input directly represents the value of the asset being transacted (e.g., 0.1 ETH). The simulated cost adds this value (converted to USD) to the estimated gas cost. The `gasLimit` for simulation is a fixed example value (210,000); actual gas limits vary greatly by transaction type.</li>\r\n                    <li>**Zustand:** The application uses Zustand for global state management, allowing different components to access and update real-time data and simulation parameters.</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}